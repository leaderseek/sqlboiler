// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LeaderSupporter is an object representing the database table.
type LeaderSupporter struct {
	ID          string `boil:"id" json:"id" toml:"id" yaml:"id"`
	CandidateID string `boil:"candidate_id" json:"candidate_id" toml:"candidate_id" yaml:"candidate_id"`

	R *leaderSupporterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L leaderSupporterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LeaderSupporterColumns = struct {
	ID          string
	CandidateID string
}{
	ID:          "id",
	CandidateID: "candidate_id",
}

var LeaderSupporterTableColumns = struct {
	ID          string
	CandidateID string
}{
	ID:          "leader_supporter.id",
	CandidateID: "leader_supporter.candidate_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var LeaderSupporterWhere = struct {
	ID          whereHelperstring
	CandidateID whereHelperstring
}{
	ID:          whereHelperstring{field: "\"leaderseek\".\"leader_supporter\".\"id\""},
	CandidateID: whereHelperstring{field: "\"leaderseek\".\"leader_supporter\".\"candidate_id\""},
}

// LeaderSupporterRels is where relationship names are stored.
var LeaderSupporterRels = struct {
	Candidate string
	IDPlayer  string
}{
	Candidate: "Candidate",
	IDPlayer:  "IDPlayer",
}

// leaderSupporterR is where relationships are stored.
type leaderSupporterR struct {
	Candidate *TeamMember `boil:"Candidate" json:"Candidate" toml:"Candidate" yaml:"Candidate"`
	IDPlayer  *Player     `boil:"IDPlayer" json:"IDPlayer" toml:"IDPlayer" yaml:"IDPlayer"`
}

// NewStruct creates a new relationship struct
func (*leaderSupporterR) NewStruct() *leaderSupporterR {
	return &leaderSupporterR{}
}

// leaderSupporterL is where Load methods for each relationship are stored.
type leaderSupporterL struct{}

var (
	leaderSupporterAllColumns            = []string{"id", "candidate_id"}
	leaderSupporterColumnsWithoutDefault = []string{"id", "candidate_id"}
	leaderSupporterColumnsWithDefault    = []string{}
	leaderSupporterPrimaryKeyColumns     = []string{"id"}
	leaderSupporterGeneratedColumns      = []string{}
)

type (
	// LeaderSupporterSlice is an alias for a slice of pointers to LeaderSupporter.
	// This should almost always be used instead of []LeaderSupporter.
	LeaderSupporterSlice []*LeaderSupporter
	// LeaderSupporterHook is the signature for custom LeaderSupporter hook methods
	LeaderSupporterHook func(context.Context, boil.ContextExecutor, *LeaderSupporter) error

	leaderSupporterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	leaderSupporterType                 = reflect.TypeOf(&LeaderSupporter{})
	leaderSupporterMapping              = queries.MakeStructMapping(leaderSupporterType)
	leaderSupporterPrimaryKeyMapping, _ = queries.BindMapping(leaderSupporterType, leaderSupporterMapping, leaderSupporterPrimaryKeyColumns)
	leaderSupporterInsertCacheMut       sync.RWMutex
	leaderSupporterInsertCache          = make(map[string]insertCache)
	leaderSupporterUpdateCacheMut       sync.RWMutex
	leaderSupporterUpdateCache          = make(map[string]updateCache)
	leaderSupporterUpsertCacheMut       sync.RWMutex
	leaderSupporterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var leaderSupporterAfterSelectHooks []LeaderSupporterHook

var leaderSupporterBeforeInsertHooks []LeaderSupporterHook
var leaderSupporterAfterInsertHooks []LeaderSupporterHook

var leaderSupporterBeforeUpdateHooks []LeaderSupporterHook
var leaderSupporterAfterUpdateHooks []LeaderSupporterHook

var leaderSupporterBeforeDeleteHooks []LeaderSupporterHook
var leaderSupporterAfterDeleteHooks []LeaderSupporterHook

var leaderSupporterBeforeUpsertHooks []LeaderSupporterHook
var leaderSupporterAfterUpsertHooks []LeaderSupporterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LeaderSupporter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LeaderSupporter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LeaderSupporter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LeaderSupporter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LeaderSupporter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LeaderSupporter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LeaderSupporter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LeaderSupporter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LeaderSupporter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderSupporterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLeaderSupporterHook registers your hook function for all future operations.
func AddLeaderSupporterHook(hookPoint boil.HookPoint, leaderSupporterHook LeaderSupporterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		leaderSupporterAfterSelectHooks = append(leaderSupporterAfterSelectHooks, leaderSupporterHook)
	case boil.BeforeInsertHook:
		leaderSupporterBeforeInsertHooks = append(leaderSupporterBeforeInsertHooks, leaderSupporterHook)
	case boil.AfterInsertHook:
		leaderSupporterAfterInsertHooks = append(leaderSupporterAfterInsertHooks, leaderSupporterHook)
	case boil.BeforeUpdateHook:
		leaderSupporterBeforeUpdateHooks = append(leaderSupporterBeforeUpdateHooks, leaderSupporterHook)
	case boil.AfterUpdateHook:
		leaderSupporterAfterUpdateHooks = append(leaderSupporterAfterUpdateHooks, leaderSupporterHook)
	case boil.BeforeDeleteHook:
		leaderSupporterBeforeDeleteHooks = append(leaderSupporterBeforeDeleteHooks, leaderSupporterHook)
	case boil.AfterDeleteHook:
		leaderSupporterAfterDeleteHooks = append(leaderSupporterAfterDeleteHooks, leaderSupporterHook)
	case boil.BeforeUpsertHook:
		leaderSupporterBeforeUpsertHooks = append(leaderSupporterBeforeUpsertHooks, leaderSupporterHook)
	case boil.AfterUpsertHook:
		leaderSupporterAfterUpsertHooks = append(leaderSupporterAfterUpsertHooks, leaderSupporterHook)
	}
}

// One returns a single leaderSupporter record from the query.
func (q leaderSupporterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LeaderSupporter, error) {
	o := &LeaderSupporter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: failed to execute a one query for leader_supporter")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LeaderSupporter records from the query.
func (q leaderSupporterQuery) All(ctx context.Context, exec boil.ContextExecutor) (LeaderSupporterSlice, error) {
	var o []*LeaderSupporter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repository: failed to assign all query results to LeaderSupporter slice")
	}

	if len(leaderSupporterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LeaderSupporter records in the query.
func (q leaderSupporterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to count leader_supporter rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q leaderSupporterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repository: failed to check if leader_supporter exists")
	}

	return count > 0, nil
}

// Candidate pointed to by the foreign key.
func (o *LeaderSupporter) Candidate(mods ...qm.QueryMod) teamMemberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CandidateID),
	}

	queryMods = append(queryMods, mods...)

	return TeamMembers(queryMods...)
}

// IDPlayer pointed to by the foreign key.
func (o *LeaderSupporter) IDPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadCandidate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (leaderSupporterL) LoadCandidate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLeaderSupporter interface{}, mods queries.Applicator) error {
	var slice []*LeaderSupporter
	var object *LeaderSupporter

	if singular {
		object = maybeLeaderSupporter.(*LeaderSupporter)
	} else {
		slice = *maybeLeaderSupporter.(*[]*LeaderSupporter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &leaderSupporterR{}
		}
		args = append(args, object.CandidateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderSupporterR{}
			}

			for _, a := range args {
				if a == obj.CandidateID {
					continue Outer
				}
			}

			args = append(args, obj.CandidateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`leaderseek.team_member`),
		qm.WhereIn(`leaderseek.team_member.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamMember")
	}

	var resultSlice []*TeamMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamMember")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for team_member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team_member")
	}

	if len(leaderSupporterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Candidate = foreign
		if foreign.R == nil {
			foreign.R = &teamMemberR{}
		}
		foreign.R.CandidateLeaderSupporters = append(foreign.R.CandidateLeaderSupporters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CandidateID == foreign.ID {
				local.R.Candidate = foreign
				if foreign.R == nil {
					foreign.R = &teamMemberR{}
				}
				foreign.R.CandidateLeaderSupporters = append(foreign.R.CandidateLeaderSupporters, local)
				break
			}
		}
	}

	return nil
}

// LoadIDPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (leaderSupporterL) LoadIDPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLeaderSupporter interface{}, mods queries.Applicator) error {
	var slice []*LeaderSupporter
	var object *LeaderSupporter

	if singular {
		object = maybeLeaderSupporter.(*LeaderSupporter)
	} else {
		slice = *maybeLeaderSupporter.(*[]*LeaderSupporter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &leaderSupporterR{}
		}
		args = append(args, object.ID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderSupporterR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`leaderseek.player`),
		qm.WhereIn(`leaderseek.player.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player")
	}

	if len(leaderSupporterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.IDLeaderSupporter = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.IDPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.IDLeaderSupporter = local
				break
			}
		}
	}

	return nil
}

// SetCandidate of the leaderSupporter to the related item.
// Sets o.R.Candidate to related.
// Adds o to related.R.CandidateLeaderSupporters.
func (o *LeaderSupporter) SetCandidate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TeamMember) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"leaderseek\".\"leader_supporter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"candidate_id"}),
		strmangle.WhereClause("\"", "\"", 2, leaderSupporterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CandidateID = related.ID
	if o.R == nil {
		o.R = &leaderSupporterR{
			Candidate: related,
		}
	} else {
		o.R.Candidate = related
	}

	if related.R == nil {
		related.R = &teamMemberR{
			CandidateLeaderSupporters: LeaderSupporterSlice{o},
		}
	} else {
		related.R.CandidateLeaderSupporters = append(related.R.CandidateLeaderSupporters, o)
	}

	return nil
}

// SetIDPlayer of the leaderSupporter to the related item.
// Sets o.R.IDPlayer to related.
// Adds o to related.R.IDLeaderSupporter.
func (o *LeaderSupporter) SetIDPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"leaderseek\".\"leader_supporter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
		strmangle.WhereClause("\"", "\"", 2, leaderSupporterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ID = related.ID
	if o.R == nil {
		o.R = &leaderSupporterR{
			IDPlayer: related,
		}
	} else {
		o.R.IDPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			IDLeaderSupporter: o,
		}
	} else {
		related.R.IDLeaderSupporter = o
	}

	return nil
}

// LeaderSupporters retrieves all the records using an executor.
func LeaderSupporters(mods ...qm.QueryMod) leaderSupporterQuery {
	mods = append(mods, qm.From("\"leaderseek\".\"leader_supporter\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"leaderseek\".\"leader_supporter\".*"})
	}

	return leaderSupporterQuery{q}
}

// FindLeaderSupporter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLeaderSupporter(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*LeaderSupporter, error) {
	leaderSupporterObj := &LeaderSupporter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"leaderseek\".\"leader_supporter\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, leaderSupporterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: unable to select from leader_supporter")
	}

	if err = leaderSupporterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return leaderSupporterObj, err
	}

	return leaderSupporterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LeaderSupporter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no leader_supporter provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderSupporterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	leaderSupporterInsertCacheMut.RLock()
	cache, cached := leaderSupporterInsertCache[key]
	leaderSupporterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			leaderSupporterAllColumns,
			leaderSupporterColumnsWithDefault,
			leaderSupporterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(leaderSupporterType, leaderSupporterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(leaderSupporterType, leaderSupporterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"leaderseek\".\"leader_supporter\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"leaderseek\".\"leader_supporter\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repository: unable to insert into leader_supporter")
	}

	if !cached {
		leaderSupporterInsertCacheMut.Lock()
		leaderSupporterInsertCache[key] = cache
		leaderSupporterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LeaderSupporter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LeaderSupporter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	leaderSupporterUpdateCacheMut.RLock()
	cache, cached := leaderSupporterUpdateCache[key]
	leaderSupporterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			leaderSupporterAllColumns,
			leaderSupporterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repository: unable to update leader_supporter, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"leaderseek\".\"leader_supporter\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, leaderSupporterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(leaderSupporterType, leaderSupporterMapping, append(wl, leaderSupporterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update leader_supporter row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by update for leader_supporter")
	}

	if !cached {
		leaderSupporterUpdateCacheMut.Lock()
		leaderSupporterUpdateCache[key] = cache
		leaderSupporterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q leaderSupporterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all for leader_supporter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected for leader_supporter")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LeaderSupporterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repository: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderSupporterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"leaderseek\".\"leader_supporter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, leaderSupporterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all in leaderSupporter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected all in update all leaderSupporter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LeaderSupporter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no leader_supporter provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderSupporterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	leaderSupporterUpsertCacheMut.RLock()
	cache, cached := leaderSupporterUpsertCache[key]
	leaderSupporterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			leaderSupporterAllColumns,
			leaderSupporterColumnsWithDefault,
			leaderSupporterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			leaderSupporterAllColumns,
			leaderSupporterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repository: unable to upsert leader_supporter, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(leaderSupporterPrimaryKeyColumns))
			copy(conflict, leaderSupporterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"leaderseek\".\"leader_supporter\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(leaderSupporterType, leaderSupporterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(leaderSupporterType, leaderSupporterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repository: unable to upsert leader_supporter")
	}

	if !cached {
		leaderSupporterUpsertCacheMut.Lock()
		leaderSupporterUpsertCache[key] = cache
		leaderSupporterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LeaderSupporter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LeaderSupporter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repository: no LeaderSupporter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), leaderSupporterPrimaryKeyMapping)
	sql := "DELETE FROM \"leaderseek\".\"leader_supporter\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete from leader_supporter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by delete for leader_supporter")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q leaderSupporterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repository: no leaderSupporterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from leader_supporter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for leader_supporter")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LeaderSupporterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(leaderSupporterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderSupporterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"leaderseek\".\"leader_supporter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderSupporterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from leaderSupporter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for leader_supporter")
	}

	if len(leaderSupporterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LeaderSupporter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLeaderSupporter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LeaderSupporterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LeaderSupporterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderSupporterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"leaderseek\".\"leader_supporter\".* FROM \"leaderseek\".\"leader_supporter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderSupporterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repository: unable to reload all in LeaderSupporterSlice")
	}

	*o = slice

	return nil
}

// LeaderSupporterExists checks if the LeaderSupporter row exists.
func LeaderSupporterExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"leaderseek\".\"leader_supporter\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repository: unable to check if leader_supporter exists")
	}

	return exists, nil
}
